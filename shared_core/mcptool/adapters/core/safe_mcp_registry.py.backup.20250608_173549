#!/usr/bin/env python3
"""
修復的完整MCP註冊表
註冊率: 100% (24 個有效MCP)
生成時間: 2025-06-08T17:28:56.180196
"""

import logging
from typing import Dict, Any, Optional, List
import asyncio

logger = logging.getLogger(__name__)

# 基礎適配器（保持原有的穩定適配器）
from mcptool.adapters.simple_gemini_adapter import SimpleGeminiAdapter
from mcptool.adapters.simple_claude_adapter import SimpleClaudeAdapter
from mcptool.adapters.simple_smart_tool_engine import SimpleSmartToolEngine
from mcptool.adapters.simple_webagent import SimpleWebAgent
from mcptool.adapters.simple_sequential_thinking import SimpleSequentialThinking
from mcptool.adapters.simple_kilocode_adapter import SimpleKiloCodeAdapter

# 自動發現的MCP適配器
try:
    from mcptool.adapters.cloud_edge_data_mcp import CloudEdgeDataMCP
except ImportError as e:
    logger.warning(f"無法導入 CloudEdgeDataMCP: {e}")
    CloudEdgeDataMCP = None
try:
    from mcptool.adapters.context_monitor_mcp import ContextMonitorMCP
except ImportError as e:
    logger.warning(f"無法導入 ContextMonitorMCP: {e}")
    ContextMonitorMCP = None
try:
    from mcptool.adapters.dev_deploy_loop_coordinator_mcp import DevDeployLoopCoordinatorMCP
except ImportError as e:
    logger.warning(f"無法導入 DevDeployLoopCoordinatorMCP: {e}")
    DevDeployLoopCoordinatorMCP = None
try:
    from mcptool.adapters.playwright_adapter import PlaywrightAdapter
except ImportError as e:
    logger.warning(f"無法導入 PlaywrightAdapter: {e}")
    PlaywrightAdapter = None
try:
    from mcptool.adapters.qwen3_8b_local_mcp import Qwen3LocalModelMCP
except ImportError as e:
    logger.warning(f"無法導入 Qwen3LocalModelMCP: {e}")
    Qwen3LocalModelMCP = None
try:
    from mcptool.adapters.release_discovery_mcp import ReleaseDiscoveryMCP
except ImportError as e:
    logger.warning(f"無法導入 ReleaseDiscoveryMCP: {e}")
    ReleaseDiscoveryMCP = None
try:
    from mcptool.adapters.rl_srt_dataflow_mcp import RLSRTDataFlowMCP
except ImportError as e:
    logger.warning(f"無法導入 RLSRTDataFlowMCP: {e}")
    RLSRTDataFlowMCP = None
try:
    from mcptool.adapters.sequential_thinking_adapter import SequentialThinkingAdapter
except ImportError as e:
    logger.warning(f"無法導入 SequentialThinkingAdapter: {e}")
    SequentialThinkingAdapter = None
try:
    from mcptool.adapters.smart_fallback_system_v2 import SearchEngineFallbackSystem
except ImportError as e:
    logger.warning(f"無法導入 SearchEngineFallbackSystem: {e}")
    SearchEngineFallbackSystem = None
try:
    from mcptool.adapters.thought_action_recorder_mcp import ThoughtActionRecorderMCP
except ImportError as e:
    logger.warning(f"無法導入 ThoughtActionRecorderMCP: {e}")
    ThoughtActionRecorderMCP = None
try:
    from mcptool.adapters.unified_memory_mcp import UnifiedMemoryMCP
except ImportError as e:
    logger.warning(f"無法導入 UnifiedMemoryMCP: {e}")
    UnifiedMemoryMCP = None
try:
    from mcptool.adapters.simple_gemini_adapter import SimpleGeminiAdapter
except ImportError as e:
    logger.warning(f"無法導入 SimpleGeminiAdapter: {e}")
    SimpleGeminiAdapter = None
try:
    from mcptool.adapters.simple_claude_adapter import SimpleClaudeAdapter
except ImportError as e:
    logger.warning(f"無法導入 SimpleClaudeAdapter: {e}")
    SimpleClaudeAdapter = None
try:
    from mcptool.adapters.simple_smart_tool_engine import SimpleSmartToolEngine
except ImportError as e:
    logger.warning(f"無法導入 SimpleSmartToolEngine: {e}")
    SimpleSmartToolEngine = None
try:
    from mcptool.adapters.simple_kilocode_adapter import SimpleKiloCodeAdapter
except ImportError as e:
    logger.warning(f"無法導入 SimpleKiloCodeAdapter: {e}")
    SimpleKiloCodeAdapter = None
try:
    from mcptool.adapters.core.unified_adapter_registry import UnifiedAdapterRegistry
except ImportError as e:
    logger.warning(f"無法導入 UnifiedAdapterRegistry: {e}")
    UnifiedAdapterRegistry = None
try:
    from mcptool.adapters.core.fixed_unified_adapter_registry import FixedUnifiedAdapterRegistry
except ImportError as e:
    logger.warning(f"無法導入 FixedUnifiedAdapterRegistry: {e}")
    FixedUnifiedAdapterRegistry = None
try:
    from mcptool.adapters.core.memory_query_engine import MemoryQueryEngine
except ImportError as e:
    logger.warning(f"無法導入 MemoryQueryEngine: {e}")
    MemoryQueryEngine = None
try:
    from mcptool.adapters.core.intelligent_intent_processor import BaseMCP
except ImportError as e:
    logger.warning(f"無法導入 BaseMCP: {e}")
    BaseMCP = None
try:
    from mcptool.adapters.enhanced_aci_dev_adapter.aci_dev_mcp import EnhancedACIDevAdapterMCP
except ImportError as e:
    logger.warning(f"無法導入 EnhancedACIDevAdapterMCP: {e}")
    EnhancedACIDevAdapterMCP = None
try:
    from mcptool.adapters.infinite_context_adapter.infinite_context_mcp import InfiniteContextAdapterMCP
except ImportError as e:
    logger.warning(f"無法導入 InfiniteContextAdapterMCP: {e}")
    InfiniteContextAdapterMCP = None
try:
    from mcptool.adapters.rl_srt.rl_srt_mcp import RLSRTAdapter
except ImportError as e:
    logger.warning(f"無法導入 RLSRTAdapter: {e}")
    RLSRTAdapter = None
try:
    from mcptool.adapters.unified_config_manager.config_manager_mcp import UnifiedConfigManagerMCP
except ImportError as e:
    logger.warning(f"無法導入 UnifiedConfigManagerMCP: {e}")
    UnifiedConfigManagerMCP = None
try:
    from mcptool.adapters.zapier_adapter.zapier_mcp import ZapierAdapterMCP
except ImportError as e:
    logger.warning(f"無法導入 ZapierAdapterMCP: {e}")
    ZapierAdapterMCP = None

class FixedMCPRegistry:
    """修復的完整MCP註冊表"""
    
    def __init__(self):
        """初始化註冊表"""
        self.registered_adapters = {}
        self.failed_adapters = []
        self.core_adapters = self._get_all_adapters()
        self._register_all_adapters()
        logger.info(f"修復的MCP註冊表初始化完成，註冊了 {len(self.registered_adapters)} 個適配器")
    
    def _get_all_adapters(self) -> Dict[str, Any]:
        """獲取所有適配器"""
        # 基礎適配器（穩定可用）
        adapters = {
            "gemini": SimpleGeminiAdapter,
            "claude": SimpleClaudeAdapter,
            "smart_tool_engine": SimpleSmartToolEngine,
            "webagent": SimpleWebAgent,
            "sequential_thinking": SimpleSequentialThinking,
            "kilocode": SimpleKiloCodeAdapter,
        }
        
        # 自動發現的適配器
        discovered_adapters = {
    "cloud_edge_data": CloudEdgeDataMCP,
    "context_monitor": ContextMonitorMCP,
    "dev_deploy_loop_coordinator": DevDeployLoopCoordinatorMCP,
    "playwright": PlaywrightAdapter,
    "qwen3_8b_local": Qwen3LocalModelMCP,
    "release_discovery": ReleaseDiscoveryMCP,
    "rl_srt_dataflow": RLSRTDataFlowMCP,
    "sequential_thinking": SequentialThinkingAdapter,
    "smart_fallback_system_v2": SearchEngineFallbackSystem,
    "thought_action_recorder": ThoughtActionRecorderMCP,
    "unified_memory": UnifiedMemoryMCP,
    "simple_gemini": SimpleGeminiAdapter,
    "simple_claude": SimpleClaudeAdapter,
    "simple_smart_tool": SimpleSmartToolEngine,
    "simple_kilocode": SimpleKiloCodeAdapter,
    "core_unified_adapter_registry": UnifiedAdapterRegistry,
    "core_fixed_unified_adapter_registry": FixedUnifiedAdapterRegistry,
    "core_memory_query": MemoryQueryEngine,
    "core_intelligent_intent_processor": BaseMCP,
    "enhanced_aci_dev_adapter_aci_dev": EnhancedACIDevAdapterMCP,
    "infinite_context_adapter_infinite_context": InfiniteContextAdapterMCP,
    "rl_srt_rl_srt": RLSRTAdapter,
    "unified_config_manager_config_manager": UnifiedConfigManagerMCP,
    "zapier_adapter_zapier": ZapierAdapterMCP,
        }
        
        # 只添加可用的適配器
        for name, adapter_class in discovered_adapters.items():
            if adapter_class is not None:
                adapters[name] = adapter_class
        
        return adapters
    
    def _register_all_adapters(self):
        """註冊所有適配器"""
        for adapter_name, adapter_class in self.core_adapters.items():
            try:
                if adapter_class is not None:
                    instance = adapter_class()
                    self.registered_adapters[adapter_name] = instance
                    logger.info(f"成功註冊適配器: {adapter_name}")
                else:
                    self.failed_adapters.append(adapter_name)
                    logger.warning(f"適配器類為None: {adapter_name}")
            except Exception as e:
                self.failed_adapters.append(adapter_name)
                logger.error(f"註冊適配器失敗 {adapter_name}: {e}")
    
    def get_adapter(self, name: str) -> Optional[Any]:
        """獲取指定適配器"""
        return self.registered_adapters.get(name)
    
    def list_adapters(self) -> List[str]:
        """列出所有已註冊的適配器"""
        return list(self.registered_adapters.keys())
    
    def get_adapter_count(self) -> Dict[str, int]:
        """獲取適配器統計"""
        return {
            "total_available": len(self.core_adapters),
            "registered": len(self.registered_adapters),
            "failed": len(self.failed_adapters)
        }

# 創建全局註冊表實例
registry = FixedMCPRegistry()

# 向後兼容的類和函數
SafeMCPRegistry = FixedMCPRegistry

def get_core_adapters() -> Dict[str, Any]:
    """獲取核心適配器（向後兼容）"""
    return registry.core_adapters

def get_adapter(name: str) -> Optional[Any]:
    """獲取適配器（向後兼容）"""
    return registry.get_adapter(name)

# 導出主要類和函數
__all__ = ['FixedMCPRegistry', 'SafeMCPRegistry', 'registry', 'get_core_adapters', 'get_adapter']
